// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#include "social_graph.h"

#pragma once

// An XblSocialManagerUserGroup is a projection of a local user's SocialGraph.
// It can be created as either a filtered set of the local user's followees or from a list of remote XboxLive user xuids.
struct XblSocialManagerUserGroup : public std::enable_shared_from_this<XblSocialManagerUserGroup>
{
public:
    // Creates a user group and registers it with the local user's underlying SocialGraph
    static std::shared_ptr<XblSocialManagerUserGroup> Make(
        std::shared_ptr<xbox::services::social::manager::SocialGraph> socialGraph,
        XblPresenceFilter presenceFilter,
        XblRelationshipFilter relationshipFilter
    ) noexcept;

    static std::shared_ptr<XblSocialManagerUserGroup> Make(
        std::shared_ptr<xbox::services::social::manager::SocialGraph> socialGraph,
        Vector<uint64_t>&& trackedUsers
    ) noexcept;

    ~XblSocialManagerUserGroup() noexcept;

    // Initializes the group based on the current state of the SocialGraph.
    void Initialize(const UnorderedMap<uint64_t, std::shared_ptr<XblSocialManagerUser>>& profiles) noexcept;

    // Updates user and tracked user list based on graph changes since last DoWork call.
    // Input events vector contains events generated by graph changes since the previous DoWork call.
    // Output events vector will also contain SocialUserGroupLoaded/Updated events if applicable.
    void DoWork(_Inout_ Vector<XblSocialManagerEvent>& events) noexcept;

    // Properties of the group
    XblSocialUserGroupType const type;
    XblPresenceFilter const presenceFilter{ XblPresenceFilter::Unknown };
    XblRelationshipFilter const relationshipFilter{ XblRelationshipFilter::Unknown };

    // Public vector view of users tracked by the group.
    // For Filter groups, this will be a filtered list of the Local user's full GraphView.
    // For List groups, this will be fixed set of users.
    const Vector<const XblSocialManagerUser*>& Users() noexcept;

    // List of Xuids tracked by the group.
    const Vector<uint64_t>& TrackedUsers() noexcept;

    // Local user whose SocialGraph the group is backed by
    std::shared_ptr<User> LocalUser() const noexcept;

    // Updates the list of tracked Xuids. Only valid for List based groups.
    HRESULT UpdateTrackedUsers(Vector<uint64_t>&& newUserList) noexcept;

private:
    XblSocialManagerUserGroup(
        std::shared_ptr<xbox::services::social::manager::SocialGraph> socialGraph,
        XblPresenceFilter presenceFilter,
        XblRelationshipFilter relationshipFilter
    ) noexcept;

    XblSocialManagerUserGroup(
        std::shared_ptr<xbox::services::social::manager::SocialGraph> socialGraph,
        Vector<uint64_t>&& trackedUsers
    ) noexcept;

    bool IsMemberOfGroup(XblSocialManagerUser const* user) const noexcept;

    std::shared_ptr<User> m_localUser;
    std::weak_ptr<xbox::services::social::manager::SocialGraph> m_graph;

    // Public views of users/trackedUesrs
    Vector<const XblSocialManagerUser*> m_usersView;
    Vector<uint64_t> m_trackedUsersView;

    UnorderedMap<uint64_t, XblSocialManagerUser const*> m_users;
    UnorderedSet<uint64_t> m_trackedUsers;

    bool m_loaded{ false };
    bool m_updated{ false };

    mutable std::mutex m_mutex;
};